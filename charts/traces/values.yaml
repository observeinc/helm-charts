global:
  observe:
    otelPath: "/v1/otel"

observe:
  token:
    create: true
    value: ""

proxy:
  enabled: false

opentelemetry-collector:
  fullnameOverride: "observe-traces"
  nameOverride: traces
  mode: "daemonset"  # daemonset or deployment
  service:
    enabled: true
  image:
    repository: "otel/opentelemetry-collector-contrib"
  command:
    extraArgs: ["--set=service.telemetry.metrics.address=:58888"]
  resources:
    limits:
      cpu: 250m
      memory: 256Mi
    requests:
      cpu: 250m
      memory: 256Mi
  replicaCount: 10  # only used with deployment mode
  clusterRole:
    create: true
    rules:
      - apiGroups:
          - ""
        resources:
          - pods
          - namespaces
        verbs:
          - get
          - list
          - watch
  ports:
    zpages:
      enabled: true
      containerPort: 55679
      servicePort: 55679
      hostPort: 0
      protocol: TCP
    metrics:
      enabled: true
      containerPort: 58888
      servicePort: 58888
      hostPort: 0
      protocol: TCP
    otlp:
      enabled: true
      containerPort: 4317
      servicePort: 4317
      hostPort: 0
      protocol: TCP
    otlp-http:
      enabled: true
      containerPort: 4318
      servicePort: 4318
      hostPort: 0
      protocol: TCP
    zipkin:
      enabled: true
      containerPort: 9411
      servicePort: 9411
      hostPort: 0
      protocol: TCP
    jaeger-compact:
      enabled: false
    jaeger-thrift:
      enabled: false
    jaeger-grpc:
      enabled: false
  extraEnvs:
    - name: OBSERVE_TOKEN
      valueFrom:
        secretKeyRef:
          name: otel-credentials
          key: OBSERVE_TOKEN
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - {key: observeinc.com/unschedulable, operator: DoesNotExist}
              - {key: kubernetes.io/os, operator: NotIn, values: [windows]}
  livenessProbe:
    initialDelaySeconds: 5
  readinessProbe:
    initialDelaySeconds: 10

  # opentelemetry-collector configuration
  config:
    exporters:
      logging:
        loglevel: info
      otlphttp:
        endpoint: '{{ include "observe.collectionEndpoint" . }}{{ .Values.global.observe.otelPath }}'
        headers:
          authorization: "Bearer ${OBSERVE_TOKEN}"
        sending_queue:
          num_consumers: 4
          queue_size: 100
        retry_on_failure:
          enabled: true
    extensions:
      health_check: {}
      zpages: {}
    processors:
      probabilistic_sampler:
        hash_seed: 22
        sampling_percentage: 100
      k8sattributes:
        auth_type: serviceAccount
        passthrough: false
        extract:
          metadata:
            - k8s.pod.name
            - k8s.namespace.name
            - k8s.cluster.uid
        pod_association:
          - sources:
              - from: resource_attribute
                name: k8s.pod.ip
          - sources:
              - from: connection
      batch: {}
      memory_limiter:
        # 80% of maximum memory up to 2G
        # Must be less than limit or gc will never run
        limit_mib: 192
        # 25% of limit up to 2G
        spike_limit_mib: 100
        check_interval: 5s
    receivers:
      zipkin: {}
      otlp:
        protocols:
          grpc: {}
          http: {}
    service:
      pipelines:
        traces:
          receivers: [otlp, zipkin]
          processors: [probabilistic_sampler, k8sattributes, memory_limiter, batch]
          exporters: [otlphttp, logging]
        metrics:
          receivers: [otlp]
          processors: [k8sattributes, memory_limiter, batch]
          exporters: [otlphttp, logging]
        logs:
          receivers: [otlp]
          processors: [k8sattributes, memory_limiter, batch]
          exporters: [otlphttp, logging]
