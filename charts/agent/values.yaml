observe:
  # If create = false it is assumed that a secret named agent-credentials with key: OBSERVE_TOKEN already exists
  token:
    create: true
    value: ""
  # ex -  https://12345678.collect.observeinc.com
  collectionEndpoint:
    value: ""
  # this is temporary and will be removed
  entityToken:
    # To create secret
    create: false
    value: ""
    # To use exporter
    use: false

cluster:
  name: observe-agent-monitored-cluster
  events:
    pullInterval: 20m
    enabled: true
  metrics:
    enabled: true

  namespaceOverride:
    # ! This needs to have same value as namespaceOverride in deployments and daemonsets below
    value: observe
  uidOverride:
    value: ""

application:
  # use this option to scrape prometheus metrics from pods
  # cluster.metrics.enabled must be set to true
  prometheusScrape:
    enabled: false
    interval: 10s
    # namespaces to exclude from scraping
    # drop is processed first so all namespaces that match regex will be dropped
    namespaceDropRegex: (.*istio.*|.*ingress.*|kube-system)
    # namespaces to explicity include for scraping - can use or (ns1|ns2)
    # keep is processed after drop so only remaining namespaces that match regex will be kept
    namespaceKeepRegex: (.*)
    # port names to scrape from - can use or .*metrics|otherportname
    portKeepRegex: .*metrics
    # metrics to drop
    metricDropRegex: .*bucket
    # metrics to keep
    metricKeepRegex: (.*)

node:
  enabled: true
  metrics:
    enabled: true
  containers:
    logs:
      enabled: true
    metrics:
      enabled: true

agent:
  config:
    global:
      processors:
        batch:
          send_batch_size: 100
          send_batch_max_size: 100
      service:
        telemetry:
          metrics_level: normal
          logging_level: WARN
          logging_encoding: console
      debug:
        # values basic, normal, detailed
        verbosity: basic
  selfMonitor:
    enabled: true


################################################
cluster-events:
  mode: deployment

  # ----------------------------------------- #
  # Different for each deployment/daemonset #
  nameOverride: "cluster-events"
  namespaceOverride: "observe"

  configMap:
    create: false
    existingName: "cluster-events"
  # ----------------------------------------- #

  # ----------------------------------------- #
  # Same for each deployment/daemonset      #
  resources:
    requests:
      cpu: 250m
      memory: 256Mi

  image:
    repository: observeinc/observe-agent
    # Overrides the image tag whose default is the chart appVersion.
    # The service's name will be applied to the end of this value.
    tag: "1.1.0"
    pullPolicy: IfNotPresent

  command:
    name: "observe-agent"
    extraArgs: ["start", "--config=/observe-agent-conf/observe-agent.yaml", "--otel-config=/conf/relay.yaml"]

  serviceAccount:
    create: false
    name: "observe-agent-service-account"

  clusterRole:
    create: false
    name: "observe-agent-cluster-role"

  livenessProbe:
    httpGet:
      port: 13133
      path: /status
    initialDelaySeconds: 30
    periodSeconds: 5
  readinessProbe:
    httpGet:
      port: 13133
      path: /status
    initialDelaySeconds: 30
    periodSeconds: 5

  networkPolicy:
    enabled: true
    egressRules: [{}]


  podAnnotations: {
    # This stops optional prometheus scrape config from picking up these pods
    observeinc_com_scrape: 'false',
    observe_monitor_purpose: observecollection,
    observe_monitor_scrape: 'true',
    observe_monitor_path: '/metrics',
    observe_monitor_port: '8888',
  }

  # Standard anti-affinity rules will exclude any node labeled with observeinc.com/unschedulable or using windows os
  # See helm-charts/examples/agent/affinity/README.md for more information
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: observeinc.com/unschedulable
                operator: DoesNotExist
              - key: kubernetes.io/os
                operator: NotIn
                values: [windows]

  ports:
    metrics:
      # The metrics port is disabled by default. However you need to enable the port
      # in order to use the ServiceMonitor (serviceMonitor.enabled) or PodMonitor (podMonitor.enabled).
      enabled: true
      containerPort: 8888
      servicePort: 8888
      protocol: TCP
  # this init container provides the cluster uid (kube-system namespace) as config map
  initContainers:
    - name: kube-cluster-info
      image: observeinc/kube-cluster-info:v0.11.1
      imagePullPolicy: Always
      env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
  # extract clusteruid from configmap create by init container
  extraEnvs:
    - name: OBSERVE_CLUSTER_NAME
      valueFrom:
        configMapKeyRef:
          name: cluster-name
          key: name
    - name: OBSERVE_CLUSTER_UID
      valueFrom:
        configMapKeyRef:
          name: cluster-info
          key: id
    - name: TOKEN
      valueFrom:
        secretKeyRef:
          name: agent-credentials
          key: OBSERVE_TOKEN
          optional: true
    - name: ENTITY_TOKEN
      valueFrom:
        secretKeyRef:
          name: agent-credentials
          key: ENTITY_TOKEN
          optional: true
  extraEnvsFrom: []
  extraVolumes:
    - name: "observe-agent-deployment-config"
      configMap:
        name: "observe-agent"
        items:
          - key: "relay"
            path: "observe-agent.yaml"
        defaultMode: 420

  extraVolumeMounts:
    - name: observe-agent-deployment-config
      mountPath: /observe-agent-conf
  # ----------------------------------------- #

################################################
cluster-metrics:
  mode: deployment
  # ----------------------------------------- #
  # Different for each deployment/daemonset #
  nameOverride: "cluster-metrics"
  namespaceOverride: "observe"

  configMap:
    create: false
    existingName: "cluster-metrics"
  # ----------------------------------------- #

  # ----------------------------------------- #
  # Same for each deployment/daemonset      #
  resources:
    requests:
      cpu: 250m
      memory: 256Mi

  image:
    repository: observeinc/observe-agent
    # # Overrides the image tag whose default is the chart appVersion.
    # # The service's name will be applied to the end of this value.
    tag: "1.1.0"
    pullPolicy: IfNotPresent

  command:
    name: "observe-agent"
    extraArgs: ["start", "--config=/observe-agent-conf/observe-agent.yaml", "--otel-config=/conf/relay.yaml"]

  serviceAccount:
    create: false
    name: "observe-agent-service-account"
  clusterRole:
    create: false
    name: "observe-agent-cluster-role"

  livenessProbe:
    httpGet:
      port: 13133
      path: /status
    initialDelaySeconds: 30
    periodSeconds: 5

  readinessProbe:
    httpGet:
      port: 13133
      path: /status
    initialDelaySeconds: 30
    periodSeconds: 5

  networkPolicy:
    enabled: true
    egressRules: [{}]

  podAnnotations: {
    # This stops optional prometheus scrape config from picking up these pods
    observeinc_com_scrape: 'false',
    observe_monitor_purpose: observecollection,
    observe_monitor_scrape: 'true',
    observe_monitor_path: '/metrics',
    observe_monitor_port: '8888',
  }

  # Standard anti-affinity rules will exclude any node labeled with observeinc.com/unschedulable or using windows os
  # See helm-charts/examples/agent/affinity/README.md for more information
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: observeinc.com/unschedulable
                operator: DoesNotExist
              - key: kubernetes.io/os
                operator: NotIn
                values: [windows]

  ports:
    metrics:
      # The metrics port is disabled by default. However you need to enable the port
      # in order to use the ServiceMonitor (serviceMonitor.enabled) or PodMonitor (podMonitor.enabled).
      enabled: true
      containerPort: 8888
      servicePort: 8888
      protocol: TCP
  # this init container provides the cluster uid (kube-system namespace) as config map
  initContainers:
    - name: kube-cluster-info
      image: observeinc/kube-cluster-info:v0.11.1
      imagePullPolicy: Always
      env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
  # extract clusteruid from configmap create by init container
  extraEnvs:
    - name: OBSERVE_CLUSTER_NAME
      valueFrom:
        configMapKeyRef:
          name: cluster-name
          key: name
    - name: OBSERVE_CLUSTER_UID
      valueFrom:
        configMapKeyRef:
          name: cluster-info
          key: id
    - name: TOKEN
      valueFrom:
        secretKeyRef:
          name: agent-credentials
          key: OBSERVE_TOKEN
          optional: true
  extraEnvsFrom: []
  extraVolumes:
    - name: "observe-agent-deployment-config"
      configMap:
        name: "observe-agent"
        items:
          - key: "relay"
            path: "observe-agent.yaml"
        defaultMode: 420
  extraVolumeMounts:
    - name: observe-agent-deployment-config
      mountPath: /observe-agent-conf
  # ----------------------------------------- #

################################################
node-logs-metrics:
  mode: daemonset
  # ----------------------------------------- #
  # Different for each deployment/daemonset #
  nameOverride: "node-logs-metrics"
  namespaceOverride: "observe"

  configMap:
    create: false
    existingName: "node-logs-metrics"
  # ----------------------------------------- #

  # ----------------------------------------- #
  # Same for each deployment/daemonset      #
  resources:
    requests:
      cpu: 250m
      memory: 256Mi

  image:
    repository: observeinc/observe-agent
    # # Overrides the image tag whose default is the chart appVersion.
    # # The service's name will be applied to the end of this value.
    tag: "1.1.0"
    pullPolicy: IfNotPresent

  command:
    name: "observe-agent"
    extraArgs: ["start", "--config=/observe-agent-conf/observe-agent.yaml", "--otel-config=/conf/relay.yaml"]

  serviceAccount:
    create: false
    name: "observe-agent-service-account"
  clusterRole:
    create: false
    name: "observe-agent-cluster-role"

  livenessProbe:
    httpGet:
      port: 13133
      path: /status
    initialDelaySeconds: 30
    periodSeconds: 5

  readinessProbe:
    httpGet:
      port: 13133
      path: /status
    initialDelaySeconds: 30
    periodSeconds: 5

  networkPolicy:
    enabled: true
    egressRules: [{}]

  podAnnotations: {
    # This stops optional prometheus scrape config from picking up these pods
    observeinc_com_scrape: 'false',
    observe_monitor_purpose: observecollection,
    observe_monitor_scrape: 'true',
    observe_monitor_path: '/metrics',
    observe_monitor_port: '8888',
  }

  # Standard anti-affinity rules will exclude any node labeled with observeinc.com/unschedulable or using windows os
  # See helm-charts/examples/agent/affinity/README.md for more information
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: observeinc.com/unschedulable
                operator: DoesNotExist
              - key: kubernetes.io/os
                operator: NotIn
                values: [windows]

  ports:
    metrics:
      # The metrics port is disabled by default. However you need to enable the port
      # in order to use the ServiceMonitor (serviceMonitor.enabled) or PodMonitor (podMonitor.enabled).
      enabled: true
      containerPort: 8888
      servicePort: 8888
      protocol: TCP
  # this init container provides the cluster uid (kube-system namespace) as config map
  initContainers:
    - name: kube-cluster-info
      image: observeinc/kube-cluster-info:v0.11.1
      imagePullPolicy: Always
      env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
  # extract clusteruid from configmap create by init container
  extraEnvs:
    - name: OBSERVE_CLUSTER_NAME
      valueFrom:
        configMapKeyRef:
          name: cluster-name
          key: name
    - name: OBSERVE_CLUSTER_UID
      valueFrom:
        configMapKeyRef:
          name: cluster-info
          key: id
    - name: K8S_NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
    - name: TOKEN
      valueFrom:
        secretKeyRef:
          name: agent-credentials
          key: OBSERVE_TOKEN
          optional: true
  extraEnvsFrom: []
  extraVolumes:
    - name: "observe-agent-deployment-config"
      configMap:
        name: "observe-agent"
        items:
          - key: "relay"
            path: "observe-agent.yaml"
        defaultMode: 420
    - name: varlogpods
      hostPath:
        path: /var/log/pods
    - name: varlibdockercontainers
      hostPath:
        path: /var/lib/docker/containers
    - name: varlibotelcol
      hostPath:
        path: /var/lib/otelcol
        type: DirectoryOrCreate
    - name: hostfs
      hostPath:
        path: /
  extraVolumeMounts:
    - name: observe-agent-deployment-config
      mountPath: /observe-agent-conf
    - name: varlogpods
      mountPath: /var/log/pods
      readOnly: true
    - name: varlibdockercontainers
      mountPath: /var/lib/docker/containers
      readOnly: true
    - name: varlibotelcol
      mountPath: /var/lib/otelcol
    - name: hostfs
      mountPath: /hostfs
      readOnly: true
      mountPropagation: HostToContainer

  securityContext:
    runAsUser: 0
    runAsGroup: 0
  # ----------------------------------------- #

################################################
monitor:
  mode: deployment
  # ----------------------------------------- #
  # Different for each deployment/daemonset #
  nameOverride: "monitor"
  namespaceOverride: "observe"

  configMap:
    create: false
    existingName: "monitor"
  # ----------------------------------------- #

  # ----------------------------------------- #
  # Same for each deployment/daemonset      #
  resources:
    requests:
      cpu: 250m
      memory: 256Mi

  image:
    repository: observeinc/observe-agent
    # # Overrides the image tag whose default is the chart appVersion.
    # # The service's name will be applied to the end of this value.
    tag: "1.1.0"
    pullPolicy: IfNotPresent

  command:
    name: "observe-agent"
    extraArgs: ["start", "--config=/observe-agent-conf/observe-agent.yaml", "--otel-config=/conf/relay.yaml"]

  serviceAccount:
    create: false
    name: "observe-agent-service-account"
  clusterRole:
    create: false
    name: "observe-agent-cluster-role"

  livenessProbe:
    httpGet:
      port: 13133
      path: /status
    initialDelaySeconds: 30
    periodSeconds: 5

  readinessProbe:
    httpGet:
      port: 13133
      path: /status
    initialDelaySeconds: 30
    periodSeconds: 5

  networkPolicy:
    enabled: true
    egressRules: [{}]

  podAnnotations: {
    # This stops optional prometheus scrape config from picking up these pods
    observeinc_com_scrape: 'false',
    observe_monitor_purpose: observecollection,
    observe_monitor_scrape: 'false',
    observe_monitor_path: '/metrics',
    observe_monitor_port: '8888',
  }

  # Standard anti-affinity rules will exclude any node labeled with observeinc.com/unschedulable or using windows os
  # See helm-charts/examples/agent/affinity/README.md for more information
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: observeinc.com/unschedulable
                operator: DoesNotExist
              - key: kubernetes.io/os
                operator: NotIn
                values: [windows]

  ports:
    metrics:
      # The metrics port is disabled by default. However you need to enable the port
      # in order to use the ServiceMonitor (serviceMonitor.enabled) or PodMonitor (podMonitor.enabled).
      enabled: true
      containerPort: 8888
      servicePort: 8888
      protocol: TCP
  # this init container provides the cluster uid (kube-system namespace) as config map
  initContainers:
    - name: kube-cluster-info
      image: observeinc/kube-cluster-info:v0.11.1
      imagePullPolicy: Always
      env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
  # extract clusteruid from configmap create by init container
  extraEnvs:
    - name: OBSERVE_CLUSTER_NAME
      valueFrom:
        configMapKeyRef:
          name: cluster-name
          key: name
    - name: OBSERVE_CLUSTER_UID
      valueFrom:
        configMapKeyRef:
          name: cluster-info
          key: id
    - name: TOKEN
      valueFrom:
        secretKeyRef:
          name: agent-credentials
          key: OBSERVE_TOKEN
          optional: true
  extraEnvsFrom: []
  extraVolumes:
    - name: "observe-agent-deployment-config"
      configMap:
        name: "observe-agent"
        items:
          - key: "relay"
            path: "observe-agent.yaml"
        defaultMode: 420
  extraVolumeMounts:
    - name: observe-agent-deployment-config
      mountPath: /observe-agent-conf
  # ----------------------------------------- #
