# This section is for configuring agent to send data to Observe endpoints
observe:
  # If create = false it is assumed that a secret named agent-credentials with key: OBSERVE_TOKEN already exists
  token:
    create: false
    value: ""
  collectionEndpoint:
    # ex -  https://12345678.collect.observeinc.com
    value: ""
  # this is temporary and will be removed
  entityToken:
    # To create secret
    create: false
    value: ""
    # To use exporter
    use: false
  traceToken:
    create: false
    value: ""

cluster:
  # name given to your cluster
  name: observe-agent-monitored-cluster
  # configure the collection of resources and events
  events:
    # how often to pull resources from cluster
    pullInterval: 20m
    enabled: true
  # cluster-level metrics and entity events (as metrics) from the Kubernetes API server. It uses the K8s API to listen for updates.
  metrics:
    enabled: true
    interval: 60s
  # namespace to use/create
  namespaceOverride:
    # !!! IMPORTANT !!! This needs to have same value as namespaceOverride in deployments and daemonsets below
    value: observe
  # typically the clusterUid is set to kube-system namespace uid - if you need a different value use this override
  uidOverride:
    value: ""

node:
  # enables agent for collection of node logs and metrics
  # what nodes metrics and logs are collected from is configured with affinity in node-logs-metrics section below
  enabled: true
  # collects host level metrics from node
  metrics:
    enabled: true
    interval: 60s
    fileSystem:
      rootPath: /hostfs
      excludeMountPoints: '["/dev/*","/proc/*","/sys/*","/run/k3s/containerd/*","/var/lib/docker/*","/var/lib/kubelet/*","/snap/*"]'
  containers:
    logs:
      enabled: true
      # log lines above this size will be truncated
      maxLogSize: 512kb
      # If true, the receiver will pause reading a file and attempt to resend the current batch of logs if it encounters an error from downstream components.
      retryOnFailure:
        enabled: true
        # Time to wait after the first failure before retrying.
        initialInterval: 1s
        # Upper bound on retry backoff interval. Once this value is reached the delay between consecutive retries will remain constant at the specified value.
        maxInterval: 30s
        # Maximum amount of time (including retries) spent trying to send a logs batch to a downstream consumer. Once this value is reached, the data is discarded. Retrying never stops if set to 0.
        maxElapsedTime: 5m
      # A list of file glob patterns that match the file paths to be read. Need to put inside of '' to avoid helm stripping commas and quotes.
      # Log rotation glob assumes rename of file follows this pattern *.log.*
      include: '["/var/log/pods/*/*/*.log", "/var/log/pods/*/*/*.log.*", "/var/log/kube-apiserver-audit.log"]'
      # A list of file glob patterns to exclude from reading. This is applied against the paths matched by include. Need to put inside of '' to avoid helm stripping commas and quotes.
      #  Log rotation exclude glob assumes files previously rotated and renamed are zipped after rotated file is created
      exclude: '["**/*.gz", "**/*.tmp"]'
      # time unit 1m, 1h
      lookbackPeriod: 24h
      # At startup, where to start reading logs from the file. Options are beginning or end.
      startAt: end
      # multiline config block, for more information see https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/filelogreceiver/README.md#multiline-configuration
      multiline:
    # pulls node, pod, and container metrics from the API server on a kubelet and sends it down the metric pipeline for further processing.
    metrics:
      enabled: true
      interval: 60s
  kubeletstats:
    # Explicitly toggles between K8S_NODE_IP and K8S_NODE_NAME. When set to false, it uses the default value of K8S_NODE_NAME from open-telemetry/opentelemetry-collector-contrib.
    # this resolves issues similar to https://github.com/open-telemetry/opentelemetry-collector-contrib/issues/26481#issuecomment-1720797914 for `no such host` or `connection refused`.
    useNodeIp: false
  forwarder:
    enabled: true
    traces:
      enabled: true
    metrics:
      enabled: true
      # -- (string) The format of the outbound metrics from the forwarder to Observe. Valid values are "prometheus" and "otel"
      outputFormat: "prometheus"
    logs:
      enabled: true

application:
  # use this option to scrape prometheus metrics from pods
  # To enable/disable auto discovery of metrics - besides option below - you can annotate your pods
  # See helm-charts/examples/agent/pod_metrics for more information
  prometheusScrape:
    enabled: false
    # add another dedicated deployment instead of scraping from cluster-metrics service
    independentDeployment: false
    # scrape interval
    interval: 60s
    # namespaces to exclude from scraping
    # drop is processed first so all namespaces that match regex will be dropped
    namespaceDropRegex: (.*istio.*|.*ingress.*|kube-system)
    # namespaces to explicity include for scraping - can use or (ns1|ns2)
    # keep is processed after drop so only remaining namespaces that match regex will be kept
    namespaceKeepRegex: (.*)
    # port names to scrape from - can use or .*metrics|otherportname
    portKeepRegex: .*metrics
    # metrics to drop
    metricDropRegex: .*bucket
    # metrics to keep
    metricKeepRegex: (.*)

agent:
  config:
    global:
      processors:
        batch:
          sendBatchSize: 4096
          sendBatchMaxSize: 4096
          timeout: 5s
      exporters:
        sendingQueue:
          enabled: true
        retryOnFailure:
          enabled: true
          # Time to wait after the first failure before retrying.
          initialInterval: 1s
          # Upper bound on retry backoff interval. Once this value is reached the delay between consecutive retries will remain constant at the specified value.
          maxInterval: 30s
          # Maximum amount of time (including retries) spent trying to send a logs batch to a downstream consumer. Once this value is reached, the data is discarded. Retrying never stops if set to 0.
          maxElapsedTime: 5m
      service:
        telemetry:
          metricsLevel: normal
          loggingLevel: WARN
          loggingEncoding: console
      debug:
        enabled: false
        # values basic, normal, detailed
        verbosity: basic
    # additional otel collector config for cluster-events deployment
    clusterEvents:
    # additional otel collector config for cluster-metrics deployment
    clusterMetrics:
    # additional otel collector config for prometheus-scraper deployment
    prometheusScraper:
    # additional otel collector config for node-logs-metrics daemonset
    nodeLogsMetrics:
    # additional otel collector config for monitor deployment
    monitor:
    # additional otel collector config for forwarder daemonset
    forwarder:
  selfMonitor:
    enabled: true
    metrics:
      scrapeInterval: 60s


################################################
cluster-events:
  mode: deployment

  # ----------------------------------------- #
  # Different for each deployment/daemonset #
  nameOverride: "cluster-events"
  # !!! IMPORTANT !!! This needs to have same value as namespaceOverride in cluster above
  namespaceOverride: "observe"

  configMap:
    create: false
    existingName: "cluster-events"

  resources:
    requests:
      cpu: 150m
      memory: 256Mi
    limits:
      memory: 256Mi
  # ----------------------------------------- #

  # ----------------------------------------- #
  # Same for each deployment/daemonset      #
  image:
    repository: observeinc/observe-agent
    tag: 2.3.0
    pullPolicy: IfNotPresent

  command:
    name: "observe-agent"
    extraArgs: ["start", "--observe-config=/observe-agent-conf/observe-agent.yaml", "--config=/conf/relay.yaml"]

  serviceAccount:
    create: false
    name: "observe-agent-service-account"

  clusterRole:
    create: false
    name: "observe-agent-cluster-role"

  livenessProbe:
    httpGet:
      port: 13133
      path: /status
    initialDelaySeconds: 30
    periodSeconds: 5
  readinessProbe:
    httpGet:
      port: 13133
      path: /status
    initialDelaySeconds: 30
    periodSeconds: 5

  networkPolicy:
    enabled: true
    egressRules: [{}]

  podAnnotations: {
    # This stops optional prometheus scrape config from picking up these pods
    observeinc_com_scrape: 'false',
    observe_monitor_purpose: observecollection,
    observe_monitor_scrape: 'true',
    observe_monitor_path: '/metrics',
    observe_monitor_port: '8888',
  }

  # Standard anti-affinity rules will exclude any node labeled with observeinc.com/unschedulable or using windows os
  # See helm-charts/examples/agent/affinity/README.md for more information
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: observeinc.com/unschedulable
                operator: DoesNotExist
              - key: kubernetes.io/os
                operator: NotIn
                values: [windows]

  tolerations: []

  ports:
    metrics:
      # The metrics port is disabled by default. However you need to enable the port
      # in order to use the ServiceMonitor (serviceMonitor.enabled) or PodMonitor (podMonitor.enabled).
      enabled: true
      containerPort: 8888
      servicePort: 8888
      protocol: TCP
  # this init container provides the cluster uid (kube-system namespace) as config map
  initContainers:
    - name: kube-cluster-info
      image: observeinc/kube-cluster-info:v0.11.1
      imagePullPolicy: Always
      env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
  # extract clusteruid from configmap create by init container
  extraEnvs:
    - name: OBSERVE_CLUSTER_NAME
      valueFrom:
        configMapKeyRef:
          name: cluster-name
          key: name
    - name: OBSERVE_CLUSTER_UID
      valueFrom:
        configMapKeyRef:
          name: cluster-info
          key: id
    - name: TOKEN
      valueFrom:
        secretKeyRef:
          name: agent-credentials
          key: OBSERVE_TOKEN
          optional: true
  extraEnvsFrom: []
  extraVolumes:
    - name: "observe-agent-deployment-config"
      configMap:
        name: "observe-agent"
        items:
          - key: "relay"
            path: "observe-agent.yaml"
        defaultMode: 420

  extraVolumeMounts:
    - name: observe-agent-deployment-config
      mountPath: /observe-agent-conf
  # ----------------------------------------- #

################################################
cluster-metrics:
  mode: deployment
  # ----------------------------------------- #
  # Different for each deployment/daemonset #
  nameOverride: "cluster-metrics"
  # !!! IMPORTANT !!! This needs to have same value as namespaceOverride in cluster above
  namespaceOverride: "observe"

  configMap:
    create: false
    existingName: "cluster-metrics"

  resources:
    requests:
      cpu: 250m
      memory: 512Mi
    limits:
      memory: 512Mi
  # ----------------------------------------- #

  # ----------------------------------------- #
  # Same for each deployment/daemonset      #
  image:
    repository: observeinc/observe-agent
    tag: 2.3.0
    pullPolicy: IfNotPresent

  command:
    name: "observe-agent"
    extraArgs: ["start", "--observe-config=/observe-agent-conf/observe-agent.yaml", "--config=/conf/relay.yaml", "--feature-gates=+exporter.prometheusremotewritexporter.EnableMultipleWorkers"]

  serviceAccount:
    create: false
    name: "observe-agent-service-account"
  clusterRole:
    create: false
    name: "observe-agent-cluster-role"

  livenessProbe:
    httpGet:
      port: 13133
      path: /status
    initialDelaySeconds: 30
    periodSeconds: 5

  readinessProbe:
    httpGet:
      port: 13133
      path: /status
    initialDelaySeconds: 30
    periodSeconds: 5

  networkPolicy:
    enabled: true
    egressRules: [{}]

  podAnnotations: {
    # This stops optional prometheus scrape config from picking up these pods
    observeinc_com_scrape: 'false',
    observe_monitor_purpose: observecollection,
    observe_monitor_scrape: 'true',
    observe_monitor_path: '/metrics',
    observe_monitor_port: '8888',
  }

  # Standard anti-affinity rules will exclude any node labeled with observeinc.com/unschedulable or using windows os
  # See helm-charts/examples/agent/affinity/README.md for more information
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: observeinc.com/unschedulable
                operator: DoesNotExist
              - key: kubernetes.io/os
                operator: NotIn
                values: [windows]

  tolerations: []

  ports:
    metrics:
      # The metrics port is disabled by default. However you need to enable the port
      # in order to use the ServiceMonitor (serviceMonitor.enabled) or PodMonitor (podMonitor.enabled).
      enabled: true
      containerPort: 8888
      servicePort: 8888
      protocol: TCP
  # this init container provides the cluster uid (kube-system namespace) as config map
  initContainers:
    - name: kube-cluster-info
      image: observeinc/kube-cluster-info:v0.11.1
      imagePullPolicy: Always
      env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
  # extract clusteruid from configmap create by init container
  extraEnvs:
    - name: OBSERVE_CLUSTER_NAME
      valueFrom:
        configMapKeyRef:
          name: cluster-name
          key: name
    - name: OBSERVE_CLUSTER_UID
      valueFrom:
        configMapKeyRef:
          name: cluster-info
          key: id
    - name: TOKEN
      valueFrom:
        secretKeyRef:
          name: agent-credentials
          key: OBSERVE_TOKEN
          optional: true
  extraEnvsFrom: []
  extraVolumes:
    - name: "observe-agent-deployment-config"
      configMap:
        name: "observe-agent"
        items:
          - key: "relay"
            path: "observe-agent.yaml"
        defaultMode: 420
  extraVolumeMounts:
    - name: observe-agent-deployment-config
      mountPath: /observe-agent-conf
  # ----------------------------------------- #

################################################
prometheus-scraper:
  mode: deployment
  # ----------------------------------------- #
  # Different for each deployment/daemonset #
  nameOverride: "prometheus-scraper"
  # !!! IMPORTANT !!! This needs to have same value as namespaceOverride in cluster above
  namespaceOverride: "observe"

  configMap:
    create: false
    existingName: "prometheus-scraper"

  resources:
    requests:
      cpu: 250m
      memory: 512Mi
    limits:
      memory: 512Mi
  # ----------------------------------------- #

  # ----------------------------------------- #
  # Same for each deployment/daemonset      #
  image:
    repository: observeinc/observe-agent
    tag: 2.3.0
    pullPolicy: IfNotPresent

  command:
    name: "observe-agent"
    extraArgs: ["start", "--observe-config=/observe-agent-conf/observe-agent.yaml", "--config=/conf/relay.yaml", "--feature-gates=+exporter.prometheusremotewritexporter.EnableMultipleWorkers"]

  serviceAccount:
    create: false
    name: "observe-agent-service-account"
  clusterRole:
    create: false
    name: "observe-agent-cluster-role"

  livenessProbe:
    httpGet:
      port: 13133
      path: /status
    initialDelaySeconds: 30
    periodSeconds: 5

  readinessProbe:
    httpGet:
      port: 13133
      path: /status
    initialDelaySeconds: 30
    periodSeconds: 5

  networkPolicy:
    enabled: true
    egressRules: [{}]

  podAnnotations: {
    # This stops optional prometheus scrape config from picking up these pods
    observeinc_com_scrape: 'false',
    observe_monitor_purpose: observecollection,
    observe_monitor_scrape: 'true',
    observe_monitor_path: '/metrics',
    observe_monitor_port: '8888',
  }

  # Standard anti-affinity rules will exclude any node labeled with observeinc.com/unschedulable or using windows os
  # See helm-charts/examples/agent/affinity/README.md for more information
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: observeinc.com/unschedulable
                operator: DoesNotExist
              - key: kubernetes.io/os
                operator: NotIn
                values: [windows]

  tolerations: []

  ports:
    metrics:
      # The metrics port is disabled by default. However you need to enable the port
      # in order to use the ServiceMonitor (serviceMonitor.enabled) or PodMonitor (podMonitor.enabled).
      enabled: true
      containerPort: 8888
      servicePort: 8888
      protocol: TCP
  # this init container provides the cluster uid (kube-system namespace) as config map
  initContainers:
    - name: kube-cluster-info
      image: observeinc/kube-cluster-info:v0.11.1
      imagePullPolicy: Always
      env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
  # extract clusteruid from configmap create by init container
  extraEnvs:
    - name: OBSERVE_CLUSTER_NAME
      valueFrom:
        configMapKeyRef:
          name: cluster-name
          key: name
    - name: OBSERVE_CLUSTER_UID
      valueFrom:
        configMapKeyRef:
          name: cluster-info
          key: id
    - name: TOKEN
      valueFrom:
        secretKeyRef:
          name: agent-credentials
          key: OBSERVE_TOKEN
          optional: true
  extraEnvsFrom: []
  extraVolumes:
    - name: "observe-agent-deployment-config"
      configMap:
        name: "observe-agent"
        items:
          - key: "relay"
            path: "observe-agent.yaml"
        defaultMode: 420
  extraVolumeMounts:
    - name: observe-agent-deployment-config
      mountPath: /observe-agent-conf
  # ----------------------------------------- #

################################################
node-logs-metrics:
  mode: daemonset
  # ----------------------------------------- #
  # Different for each deployment/daemonset #
  nameOverride: "node-logs-metrics"
  # !!! IMPORTANT !!! This needs to have same value as namespaceOverride in cluster above
  namespaceOverride: "observe"

  configMap:
    create: false
    existingName: "node-logs-metrics"

  resources:
    requests:
      cpu: 250m
      memory: 512Mi
    limits:
      memory: 512Mi
  # ----------------------------------------- #

  # ----------------------------------------- #
  # Same for each deployment/daemonset      #
  image:
    repository: observeinc/observe-agent
    tag: 2.3.0
    pullPolicy: IfNotPresent

  command:
    name: "observe-agent"
    extraArgs: ["start", "--observe-config=/observe-agent-conf/observe-agent.yaml", "--config=/conf/relay.yaml", "--feature-gates=+exporter.prometheusremotewritexporter.EnableMultipleWorkers"]

  serviceAccount:
    create: false
    name: "observe-agent-service-account"
  clusterRole:
    create: false
    name: "observe-agent-cluster-role"

  livenessProbe:
    httpGet:
      port: 13133
      path: /status
    initialDelaySeconds: 30
    periodSeconds: 5

  readinessProbe:
    httpGet:
      port: 13133
      path: /status
    initialDelaySeconds: 30
    periodSeconds: 5

  podAnnotations: {
    # This stops optional prometheus scrape config from picking up these pods
    observeinc_com_scrape: 'false',
    observe_monitor_purpose: observecollection,
    observe_monitor_scrape: 'true',
    observe_monitor_path: '/metrics',
    observe_monitor_port: '8888',
  }

  # Standard anti-affinity rules will exclude any node labeled with observeinc.com/unschedulable or using windows os
  # See helm-charts/examples/agent/affinity/README.md for more information
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: observeinc.com/unschedulable
                operator: DoesNotExist
              - key: kubernetes.io/os
                operator: NotIn
                values: [windows]

  tolerations: []

  ports:
    otlp:
      enabled: false
    otlp-http:
      enabled: false
    jaeger-compact:
      enabled: false
    jaeger-thrift:
      enabled: false
    jaeger-grpc:
      enabled: false
    zipkin:
      enabled: false
    metrics:
      # The metrics port is disabled by default. However you need to enable the port
      # in order to use the ServiceMonitor (serviceMonitor.enabled) or PodMonitor (podMonitor.enabled).
      enabled: true
      containerPort: 8888
      servicePort: 8888
      protocol: TCP
  # this init container provides the cluster uid (kube-system namespace) as config map
  initContainers:
    - name: kube-cluster-info
      image: observeinc/kube-cluster-info:v0.11.1
      imagePullPolicy: Always
      env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
  # extract clusteruid from configmap create by init container
  extraEnvs:
    - name: OBSERVE_CLUSTER_NAME
      valueFrom:
        configMapKeyRef:
          name: cluster-name
          key: name
    - name: OBSERVE_CLUSTER_UID
      valueFrom:
        configMapKeyRef:
          name: cluster-info
          key: id
    - name: K8S_NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
    - name: K8S_NODE_IP
      valueFrom:
        fieldRef:
          fieldPath: status.hostIP
    - name: TOKEN
      valueFrom:
        secretKeyRef:
          name: agent-credentials
          key: OBSERVE_TOKEN
          optional: true
    - name: TRACES_TOKEN
      valueFrom:
        secretKeyRef:
          name: agent-credentials
          key: TRACES_TOKEN
          optional: true
  extraEnvsFrom: []
  extraVolumes:
    - name: "observe-agent-deployment-config"
      configMap:
        name: "observe-agent"
        items:
          - key: "relay"
            path: "observe-agent.yaml"
        defaultMode: 420
    - name: varlogpods
      hostPath:
        path: /var/log/pods
    - name: varlibdockercontainers
      hostPath:
        path: /var/lib/docker/containers
    - name: varlibotelcol
      hostPath:
        path: /var/lib/otelcol
        type: DirectoryOrCreate
    - name: hostfs
      hostPath:
        path: /
  extraVolumeMounts:
    - name: observe-agent-deployment-config
      mountPath: /observe-agent-conf
    - name: varlogpods
      mountPath: /var/log/pods
      readOnly: true
    - name: varlibdockercontainers
      mountPath: /var/lib/docker/containers
      readOnly: true
    - name: varlibotelcol
      mountPath: /var/lib/otelcol
    - name: hostfs
      mountPath: /hostfs
      readOnly: true
      mountPropagation: HostToContainer

  securityContext:
    runAsUser: 0
    runAsGroup: 0
  # ----------------------------------------- #

################################################
monitor:
  mode: deployment
  # ----------------------------------------- #
  # Different for each deployment/daemonset #
  nameOverride: "monitor"
  # !!! IMPORTANT !!! This needs to have same value as namespaceOverride in cluster above
  namespaceOverride: "observe"

  configMap:
    create: false
    existingName: "monitor"

  resources:
    requests:
      cpu: 150m
      memory: 256Mi
    limits:
      memory: 256Mi
  # ----------------------------------------- #

  # ----------------------------------------- #
  # Same for each deployment/daemonset      #
  image:
    repository: observeinc/observe-agent
    tag: 2.3.0
    pullPolicy: IfNotPresent

  command:
    name: "observe-agent"
    extraArgs: ["start", "--observe-config=/observe-agent-conf/observe-agent.yaml", "--config=/conf/relay.yaml", "--feature-gates=+exporter.prometheusremotewritexporter.EnableMultipleWorkers"]

  serviceAccount:
    create: false
    name: "observe-agent-service-account"
  clusterRole:
    create: false
    name: "observe-agent-cluster-role"

  livenessProbe:
    httpGet:
      port: 13133
      path: /status
    initialDelaySeconds: 30
    periodSeconds: 5

  readinessProbe:
    httpGet:
      port: 13133
      path: /status
    initialDelaySeconds: 30
    periodSeconds: 5

  networkPolicy:
    enabled: true
    egressRules: [{}]

  podAnnotations: {
    # This stops optional prometheus scrape config from picking up these pods
    observeinc_com_scrape: 'false',
    observe_monitor_purpose: observecollection,
    observe_monitor_scrape: 'false',
    observe_monitor_path: '/metrics',
    observe_monitor_port: '8888',
  }

  # Standard anti-affinity rules will exclude any node labeled with observeinc.com/unschedulable or using windows os
  # See helm-charts/examples/agent/affinity/README.md for more information
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: observeinc.com/unschedulable
                operator: DoesNotExist
              - key: kubernetes.io/os
                operator: NotIn
                values: [windows]

  tolerations: []

  ports:
    metrics:
      # The metrics port is disabled by default. However you need to enable the port
      # in order to use the ServiceMonitor (serviceMonitor.enabled) or PodMonitor (podMonitor.enabled).
      enabled: true
      containerPort: 8888
      servicePort: 8888
      protocol: TCP
  # this init container provides the cluster uid (kube-system namespace) as config map
  initContainers:
    - name: kube-cluster-info
      image: observeinc/kube-cluster-info:v0.11.1
      imagePullPolicy: Always
      env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
  # extract clusteruid from configmap create by init container
  extraEnvs:
    - name: OBSERVE_CLUSTER_NAME
      valueFrom:
        configMapKeyRef:
          name: cluster-name
          key: name
    - name: OBSERVE_CLUSTER_UID
      valueFrom:
        configMapKeyRef:
          name: cluster-info
          key: id
    - name: TOKEN
      valueFrom:
        secretKeyRef:
          name: agent-credentials
          key: OBSERVE_TOKEN
          optional: true
  extraEnvsFrom: []
  extraVolumes:
    - name: "observe-agent-deployment-config"
      configMap:
        name: "observe-agent"
        items:
          - key: "relay"
            path: "observe-agent.yaml"
        defaultMode: 420
  extraVolumeMounts:
    - name: observe-agent-deployment-config
      mountPath: /observe-agent-conf
  # ----------------------------------------- #

forwarder:
  mode: daemonset
  # ----------------------------------------- #
  # Different for each deployment/daemonset #
  nameOverride: "forwarder"
  # !!! IMPORTANT !!! This needs to have same value as namespaceOverride in cluster above
  namespaceOverride: "observe"

  configMap:
    create: false
    existingName: "forwarder"

  resources:
    requests:
      cpu: 300m
      memory: 512Mi
    limits:
      memory: 512Mi
  # ----------------------------------------- #

  # ----------------------------------------- #
  # Same for each deployment/daemonset      #
  image:
    repository: observeinc/observe-agent
    tag: 2.3.0
    pullPolicy: IfNotPresent

  command:
    name: "observe-agent"
    extraArgs: ["start", "--observe-config=/observe-agent-conf/observe-agent.yaml", "--config=/conf/relay.yaml"]

  serviceAccount:
    create: false
    name: "observe-agent-service-account"
  clusterRole:
    create: false
    name: "observe-agent-cluster-role"

  livenessProbe:
    httpGet:
      port: 13133
      path: /status
    initialDelaySeconds: 30
    periodSeconds: 5

  readinessProbe:
    httpGet:
      port: 13133
      path: /status
    initialDelaySeconds: 30
    periodSeconds: 5

  service:
    enabled: true
    type: ClusterIP

  networkPolicy:
    enabled: true
    egressRules: [{}]

  podAnnotations: {
    # This stops optional prometheus scrape config from picking up these pods
    observeinc_com_scrape: 'false',
    observe_monitor_purpose: observecollection,
    observe_monitor_scrape: 'true',
    observe_monitor_path: '/metrics',
    observe_monitor_port: '8888',
  }

  # Standard anti-affinity rules will exclude any node labeled with observeinc.com/unschedulable or using windows os
  # See helm-charts/examples/agent/affinity/README.md for more information
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: observeinc.com/unschedulable
                operator: DoesNotExist
              - key: kubernetes.io/os
                operator: NotIn
                values: [windows]

  tolerations: []

  ports:
    metrics:
      # The metrics port is disabled by default. However you need to enable the port
      # in order to use the ServiceMonitor (serviceMonitor.enabled) or PodMonitor (podMonitor.enabled).
      enabled: true
      containerPort: 8888
      servicePort: 8888
      protocol: TCP
  # this init container provides the cluster uid (kube-system namespace) as config map
  initContainers:
    - name: kube-cluster-info
      image: observeinc/kube-cluster-info:v0.11.1
      imagePullPolicy: Always
      env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
  # extract clusteruid from configmap create by init container
  extraEnvs:
    - name: OBSERVE_CLUSTER_NAME
      valueFrom:
        configMapKeyRef:
          name: cluster-name
          key: name
    - name: OBSERVE_CLUSTER_UID
      valueFrom:
        configMapKeyRef:
          name: cluster-info
          key: id
    - name: K8S_NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
    - name: TOKEN
      valueFrom:
        secretKeyRef:
          name: agent-credentials
          key: OBSERVE_TOKEN
          optional: true
    - name: TRACE_TOKEN
      valueFrom:
        secretKeyRef:
          name: agent-credentials
          key: TRACE_TOKEN
          optional: true
  extraEnvsFrom: []
  extraVolumes:
    - name: "observe-agent-deployment-config"
      configMap:
        name: "observe-agent"
        items:
          - key: "relay"
            path: "observe-agent.yaml"
        defaultMode: 420
  extraVolumeMounts:
    - name: observe-agent-deployment-config
      mountPath: /observe-agent-conf
  # ----------------------------------------- #
