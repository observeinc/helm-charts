#! /bin/bash

set -e

if [ -z "$1" ]; then
  echo "Usage: $0 <helm-export-file>"
  exit 1
fi

if ! command -v yq &> /dev/null; then
  echo "yq could not be found; please install form the latest release here: https://github.com/mikefarah/yq"
  exit 1
fi

if ! command -v observe-agent &> /dev/null; then
  echo "observe-agent could not be found; please install from the latest release https://docs.observeinc.com/en/latest/content/observe-agent/linux_install.html"
  exit 1
fi

tmp_dir="/tmp/observe-agent-helm-check"
rm -rf $tmp_dir
mkdir $tmp_dir

# Relies on https://github.com/mikefarah/yq for yaml parsing
if ! yq -e 'select(.kind == "ConfigMap" and .metadata.name == "observe-agent").data.relay' $1 > $tmp_dir/observe-agent.yaml; then
  echo "Failed to find observe-agent ConfigMaps; is $1 a kubernetes manifest YAML file generated by the observe-agent helm chart?"
  exit 1
fi

any_failed=false

confs=$(yq -e 'select(.kind == "ConfigMap").metadata.name' $1 | grep -Ev 'cluster-name|observe-agent|---')
for conf in $confs; do
    echo "Checking $conf..."
    yq -e "select(.kind == \"ConfigMap\" and .metadata.name == \"$conf\").data.relay" $1 > $tmp_dir/$conf.yaml

    # Remove any eks cloud detector since it errors outside of kubernetes
    yq -i '.processors.resourcedetection/cloud.detectors=["ec2"]' $tmp_dir/$conf.yaml

    # Remove root_path from hostmetrics since it errors outside of linux
    yq -i 'del(.receivers.hostmetrics.root_path)' $tmp_dir/$conf.yaml

    # Remove references to bearer_token_file for prom scraping since they may not be present
    yq -i 'del(.receivers.prometheus/*.config.scrape_configs[].bearer_token_file)' $tmp_dir/$conf.yaml

    # Remove kubeletstats since it errors outside of kubernetes :(
    yq -i 'del(.receivers.kubeletstats*)' $tmp_dir/$conf.yaml
    yq -i '(.service.pipelines.*.receivers[] | select(. == "kubeletstats*")) |= "nop"' $tmp_dir/$conf.yaml

    # Remove loadbalancing exporter since it errors outside of kubernetes :(
    yq -i 'del(.exporters.loadbalancing*)' $tmp_dir/$conf.yaml
    yq -i '(.service.pipelines.*.exporters[] | select(. == "loadbalancing*")) |= "nop"' $tmp_dir/$conf.yaml

    # Set various env vars to match what's provided in our helm chart pod definitions.
    if ! env MY_POD_IP=0.0.0.0 \
        GOMEMLIMIT=409MiB \
        OBSERVE_CLUSTER_NAME=observe-agent-monitored-cluster \
        OBSERVE_CLUSTER_UID=abc123 \
        K8S_NODE_NAME=test-node \
        KUBERNETES_SERVICE_HOST=0.0.0.0 \
        KUBERNETES_SERVICE_PORT=1234 \
        TOKEN=1234567890abcdefghij:1234567890abcdefghijklmnopqrstuv \
        TRACES_TOKEN=1234567890abcdefghij:1234567890abcdefghijklmnopqrstuv \
        observe-agent --config-mode=docker \
        --observe-config=$tmp_dir/observe-agent.yaml \
        --config=$tmp_dir/$conf.yaml config validate;
    then
        any_failed=true
    fi
    echo ""
done

if [ "$any_failed" = true ]; then
  echo
  echo "---"
  echo "⚠️  One or more agent configs failed validation!"
  echo
  exit 1
fi
