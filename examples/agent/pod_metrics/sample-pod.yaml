apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: prometheus-example-app
  name: prometheus-example-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: prometheus-example-app
  template:
    metadata:
      labels:
        app.kubernetes.io/name: prometheus-example-app
      annotations:
        observeinc_com_scrape: 'true'
        observeinc_com_path: '/metrics'
        observeinc_com_port: '8080'
    spec:
      containers:
      - name: prometheus-example-app
        image: quay.io/brancz/prometheus-example-app:v0.3.0
        ports:
        - name: web
          containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-example-app-service
spec:
  selector:
    app.kubernetes.io/name: prometheus-example-app
  ports:
    - protocol: TCP
      port: 8080  # Exposed service port
      targetPort: 8080
      name: metrics
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: caller-cronjob
spec:
  schedule: "*/1 * * * *"  # Runs every minute
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: caller
            image: curlimages/curl:latest  # A lightweight curl image
            env:
              - name: SLEEP_TIME
                value: "10"  # Sleep time in seconds
              - name: LOOP_COUNT
                value: "36"   # Number of iterations
            command:
              - /bin/sh
              - -c
              - |
                for i in $(seq 1 $LOOP_COUNT); do
                  curl http://prometheus-example-app-service:8080;  # Adjust the URL and port as necessary

                  # Second call on even numbers
                  if [ $((i % 2)) -eq 0 ]; then
                    curl http://prometheus-example-app-service:8080/err;  # Second target service
                    echo "Second call on even #$i made."
                  fi
                  sleep $SLEEP_TIME;
                done
          restartPolicy: OnFailure
